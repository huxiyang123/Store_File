package homework;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;


public class TestStudentXMLSAX {

	public static void main(String[] args) {
		List<StudentXML> students = null;

		try {
			SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
			students = new ArrayList<StudentXML>();
			MyHandler handler = new MyHandler(students);
			parser.parse(new File("StudentXML.xml"), handler);
		} catch (ParserConfigurationException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		} catch (IOException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		for (StudentXML b : students) {

			System.out.println(b);
		}
		

	}

}

class MyHandler extends DefaultHandler {
	private List<StudentXML> students;

	private String preName;

	private StudentXML student;

	private List<Course> courses;
	private Course course;

	public MyHandler(List<StudentXML> students) {
		this.students = students;

	}

	@Override
	public void startDocument() throws SAXException {
		// TODO 自动生成的方法存根
		super.startDocument();
	}

	@Override
	public void startElement(String uri, String localName, String qName,
			Attributes attributes) throws SAXException {
		if (qName.equals("student")) {
			student = new StudentXML();
			// student.setNo(Integer.valueOf(attributes.getValue(0)));
		} else if (qName.equals("course")) {
			course = new Course();
		}
		preName = qName;// 把当前解析的节点名字赋给全局变量。
	}

	@Override
	public void characters(char[] ch, int start, int length)
			throws SAXException {

		String result = new String(ch, start, length);
		if (preName != null) {
			if (preName.equals("sid")) {
				student.setSid(Integer.valueOf(result));
			} else if (preName.equals("sname")) {
				student.setSname(result);

			} else if (preName.equals("course")) {
//				System.out.println(1);
//				try {
//					SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
//					courses = new ArrayList<Course>();
//					MyHandler1 handler1 = new MyHandler1(courses);
//					parser.parse(new File("StudentXML.xml"), handler1);
//				} catch (ParserConfigurationException e) {
//					// TODO 自动生成的 catch 块
//					e.printStackTrace();
//				} catch (SAXException e) {
//					// TODO 自动生成的 catch 块
//					e.printStackTrace();
//				} catch (IOException e) {
//					// TODO 自动生成的 catch 块
//					e.printStackTrace();
//				}
//				for (Course b : courses) {
//
//					System.out.println(b);
//				}
				
			} else if (preName.equals("sex")) {
				student.setSex(result);
			}
		}
	}

	@Override
	public void endElement(String uri, String localName, String qName)
			throws SAXException {
		if (qName.equals("student")) {
			students.add(student);
			student = null;
		}
		preName = null;
	}
}
class MyHandler1 extends DefaultHandler {//////////////////////////////////////////////////////
	private List<Course> courses;

	private String preName;

	private Course course;

	public MyHandler1(List<Course> courses) {
		this.courses = courses;
	}

	@Override
	public void startDocument() throws SAXException {
		// TODO 自动生成的方法存根
		super.startDocument();
	}

	@Override
	public void startElement(String uri, String localName, String qName,
			Attributes attributes) throws SAXException {
		if (qName.equals("course")) {
			course = new Course();
			//course.setNo(Integer.valueOf(attributes.getValue(0)));
		}

		preName = qName;// 把当前解析的节点名字赋给全局变量。
	}

	@Override
	public void characters(char[] ch, int start, int length)
			throws SAXException {

		String result = new String(ch, start, length);
		if (preName != null) {
			if (preName.equals("cid")) {
				System.out.println("cid");
				course.setCid(Integer.valueOf(result));
			} else if (preName.equals("cname")) {
				System.out.println("cname");
				course.setCname(result);
			}
		}
	}

	@Override
	public void endElement(String uri, String localName, String qName)
			throws SAXException {
		if (qName.equals("course")) {
			courses.add(course);
			course = null;
		}
		preName = null;
	}
}
